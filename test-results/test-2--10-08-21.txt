(PushGP-CA-Image-Class) E:\Tim\GitHub\PushGP-CA-Image-Class>python main.py -p 25 -g 3 -s 25 -c 10 -d 1,2 -f test.json
2021-08-10 15:39:06.488967: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'cudart64_110.dll'; dlerror: cudart64_110.dll not found
2021-08-10 15:39:06.489086: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
Full MNIST loaded
========================================
Setup
========================================
Search Configuration:
signature: ProgramSignature(output_stacks=['float'], arity=1, push_config=PushConfig(growth_cap=500, collection_size_cap=1000, runtime_limit=10, numeric_magnitude_limit=1000000000000.0, step_limit=500))
evaluator: <mnist_estimator.CustomFunctionEvaluator object at 0x0000020305A5E910>
spawner: <pyshgp.gp.genome.GeneSpawner object at 0x0000020305A43FD0>
population_size: 25
max_generations: 3
error_threshold: 0.0
initial_genome_size: (20, 100)
simplification_steps: 2000
parallel_context: None
selection: <pyshgp.utils.DiscreteProbDistrib object at 0x0000020305945D00>
variation: <pyshgp.utils.DiscreteProbDistrib object at 0x0000020305A71A80>
Instructions:
float_add, float_sub, float_mult, float_div, float_mod, float_min, float_max, float_inc, float_dec, float_sin, float_cos, float_tan, noop, noop_open, print_float, println_float, float_pop, float_dup, float_swap, float_rot, float_flu
sh
Literals:
[Literal(value=1.0, push_type=<pyshgp.push.types.PushFloatType object at 0x000002030592ADF0>), Literal(value=1.1, push_type=<pyshgp.push.types.PushFloatType object at 0x000002030592ADF0>), Literal(value=1.2000000000000002, push_type
=<pyshgp.push.types.PushFloatType object at 0x000002030592ADF0>), Literal(value=1.3000000000000003, push_type=<pyshgp.push.types.PushFloatType object at 0x000002030592ADF0>), Literal(value=1.4000000000000004, push_type=<pyshgp.push.
types.PushFloatType object at 0x000002030592ADF0>), Literal(value=1.5000000000000004, push_type=<pyshgp.push.types.PushFloatType object at 0x000002030592ADF0>), Literal(value=1.6000000000000005, push_type=<pyshgp.push.types.PushFloa
tType object at 0x000002030592ADF0>), Literal(value=1.7000000000000006, push_type=<pyshgp.push.types.PushFloatType object at 0x000002030592ADF0>), Literal(value=1.8000000000000007, push_type=<pyshgp.push.types.PushFloatType object a
t 0x000002030592ADF0>), Literal(value=1.9000000000000008, push_type=<pyshgp.push.types.PushFloatType object at 0x000002030592ADF0>)]
ERC Generators:
[<function mnist_pysh_ca.<locals>.<lambda> at 0x0000020305A6F040>]
========================================
Start Run
========================================

Generation: 1
Best Program: (float_add 1.3000000000000003 1.1 float_add float_mult float_add float_pop 5 1.7000000000000006 1.7000000000000006 1.0 println_float float_tan float_pop float_cos 1.0 float_dec float_cos float_div float_dec float_pop f
Best Program: (float_add 1.3000000000000003 1.1 float_add float_mult float_add float_pop 5 1.7000000000000006 1.7000000000000006 1.0 println_float float_tan float_pop float_cos 1.0 float_dec float_cos float_div float_dec float_pop f
Best Program: (float_add 1.3000000000000003 1.1 float_add float_mult float_add float_pop 5 1.7000000000000006 1.700000000000000
6 1.0 println_float float_tan float_pop float_cos 1.0 float_dec float_cos float_div float_dec float_pop float_pop float_div flo
at_add 1.3000000000000003 float_inc 1.4000000000000004 1.0 float_pop float_sin 4 1.4000000000000004 float_mod input_0 float_cos
at_add 1.3000000000000003 float_inc 1.4000000000000004 1.0 float_pop float_sin 4 1.4000000000000004 float_mod input_0 float_cos
at_add 1.3000000000000003 float_inc 1.4000000000000004 1.0 float_pop float_sin 4 1.4000000000000004 float_mod input_0 float_cos float_min float_sub float_rot)
Best Error Vector: [0.22233057 0.30538023 0.22233057 0.22233057 0.22233057 0.2345506
 0.22233057 0.22233057 0.22233057 0.2632153  0.73971868 0.76294374
 0.67433405 0.59712255 0.73941886 0.6311754  0.74359119 0.71895337
 0.58468592 0.73817968]
Best Total Error: 9.289583563804626

Generation: 2
Best Program: (1.3000000000000003 1.1 float_mult float_add 5 1.7000000000000006 1.7000000000000006 1.0 println_float float_tan float_pop float_cos 1.0 float_dec float_cos float_div float_dec float_pop float_pop float_div float_add 1
Best Program: (1.3000000000000003 1.1 float_mult float_add 5 1.7000000000000006 1.7000000000000006 1.0 println_float float_tan float_pop float_cos 1.0 float_dec float_cos float_div float_dec float_pop float_pop float_div float_add 1
.3000000000000003 float_inc 1.4000000000000004 1.0 float_pop float_sin 4 1.4000000000000004 float_mod input_0 float_cos float_min float_sub float_rot)
Best Error Vector: [0.22233057 0.30538023 0.22233057 0.22233057 0.22233057 0.2345506
 0.22233057 0.22233057 0.22233057 0.2632153  0.73971868 0.76294374
 0.67433405 0.59712255 0.73941886 0.6311754  0.74359119 0.71895337
 0.58468592 0.73817968]
Best Total Error: 9.289583563804626

Generation: 3
Best Program: (1.5000000000000004 1.3000000000000003 1.5000000000000004 float_tan 1.1 float_add float_mult float_add float_pop
5 1.7000000000000006 1.0 println_float float_tan float_cos 1.0 1.9000000000000008 float_cos float_mult float_div float_dec floa
t_pop float_div float_add 1.3000000000000003 1.4000000000000004 1.0 float_pop float_sin 7 4 1.4000000000000004 float_mod println_float input_0 float_min float_sub float_rot)
Best Error Vector: [0.20284617 0.07297915 0.1143682  0.0725289  0.20366657 0.20626509
 0.0657264  0.20301139 0.20273125 0.11015165 0.79119885 0.79119885
 2.         0.79119885 0.88464868 0.79119885 0.98304808 0.79119885
 0.79458022 0.79271948]
Best Total Error: 10.865265488624573
Simplifying genome of length 39 with total error 9.289583563804626.
Simplified genome by 2 to length 37.
Simplified genome by 1 to length 36.
Simplified genome by 1 to length 35.
Simplified genome by 1 to length 34.
Simplified genome by 1 to length 33.
Simplified genome by 2 to length 31.
Simplified genome by 1 to length 30.
Simplified genome by 1 to length 29.
Simplified genome by 3 to length 26.
Simplified genome by 1 to length 25.
Simplified genome by 1 to length 24.
Simplified genome by 3 to length 21.
Simplified genome by 1 to length 20.
Simplified genome by 1 to length 19.
Simplified genome by 1 to length 18.
Simplified genome by 1 to length 17.
Simplified genome by 1 to length 16.
Simplified genome by 1 to length 15.
Simplified genome by 2 to length 13.
Simplified genome by 3 to length 10.
